const express = require('express');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 5
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition: {
        info: {
            title: 'Personal Budget API',
            versions: '1.0.0',
            description: 'Personal Budget API autogenerated by Pallavi'
        },
        host: '157.230.236.144:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);

app.use('/swagger', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());
app.use(express.json());

const prices = {
    food:[
        {
            name: 'Apple',
            price: 10
        },
        {
            name: 'Orange',
            price: 20
        },
        {
            name: 'Banana',
            price: 30
        },
        {
            name: 'Mango',
            price: 40
        },
        {
            name: 'BlueBerry',
            price: 50
        },
        {
            name: 'Grapes',
            price: 60
        }
    ]
};

/**
 * @swagger
 * /prices:
 *    get:
 *      description: Return All Prices
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object Food Containing Array Of Food Object With The Prices
 */

app.get('/prices', (req, res) => {
    res.json(prices)
});

/**
 * @swagger
 * /foods:
 *    get:
 *      description: Return All Food Items
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Array Of All Food Objects
 *
 */

app.get('/foods', (req, res) => {
    pool.getConnection()
        .then(conn => {

            conn.query("SELECT * FROM foods;")
                .then((rows) => {
                    res.json(rows);
                    conn.release();
                })
                .catch(err => {
                    console.log(err);
                    conn.release();
                });
        })
        .catch(err => {
            console.log(err);
            res.status(503);
            var result = {
                "status": "Internal error",
                "affectedRows": 0,
                "object": req.body
            }
            res.json(result);
        });
});

/**
 * @swagger
 * /prices:
 *    post:
 *      description: Add A New Food Item With The Price
 *      produces:
 *          - application/json
 *      parameters:
 *        - in: body
 *          name: food
 *          description: Add Food Item
 *          schema:
 *            type: object
 *            properties:
 *              name:
 *                type: string
 *              price:
 *                type: number
 *      responses:
 *          200:
 *              description: Successfully Added Food Item
 *          400:
 *              description: Invalid Request
 */

app.post('/prices', (req, res) => {
    const neww = req.body;
    prices.food.push(neww);
    res.status(200).json(neww);
});

/**
 * @swagger
 * /prices/{name}:
 *    patch:
 *      description: Update The Price Of A Specific Food Item
 *      produces:
 *          - application/json
 *      parameters:
 *        - in: path
 *          name: name
 *          description: Update Food Item Name
 *          required: true
 *          type: string
 *        - in: body
 *          name: price
 *          description: Update New Price For The Food Item
 *          schema:
 *            type: object
 *            properties:
 *              price:
 *                type: number
 *      responses:
 *          200:
 *              description: Successfully Updated Food Item Price
 *          404:
 *              description: Food Item Not Found
 */

app.patch('/prices/:name', (req, res) => {
    const { name } = req.params;
    const newPrice = req.body.price;

    const item = prices.food.find(item => item.name === name);

    if (!item) {
        return res.status(404).json({ message: 'Food Item Not Found' });
    }

    item.price = newPrice;
    res.json({ message: 'Successfully Updated Food Item Price' });
});

/**
 * @swagger
 * /prices/{name}:
 *    put:
 *      description: Update Or Create If Not Exists The Price Of A Specific Food Item 
 *      produces:
 *          - application/json
 *      parameters:
 *        - in: path
 *          name: name
 *          description: Name Of The Food Item To Update Or Create
 *          required: true
 *          type: string
 *        - in: body
 *          name: price
 *          description: New Price
 *          schema:
 *            type: object
 *            properties:
 *              price:
 *                type: number
 *      responses:
 *          200:
 *              description: Successfully Updated/Created Food Item Price
 *          404:
 *              description: Food Item Not Found
 */

app.put('/prices/:name', (req, res) => {
    const { name } = req.params;
    const newPrice = req.body.price;

    const item = prices.food.find(item => item.name === name);

    if (item) {
        item.price = newPrice;
        res.json({ message: 'Successfully Updated Food Item Price' });
    } 
    else {
        const newItem = { name, price: newPrice };
        prices.food.push(newItem);
        res.json({ message: 'Successfully Created Food Item Price ' });
    }
});

/**
 * @swagger
 * /prices/{name}:
 *    delete:
 *      description: Delete The Food Item
 *      produces:
 *          - application/json
 *      parameters:
 *        - in: path
 *          name: name
 *          description: Delete Food Item
 *          required: true
 *          type: string
 *      responses:
 *          200:
 *              description: Successfully Deleted Food item
 *          404:
 *              description: Food Item Not Found
 */

app.delete('/prices/:name', (req, res) => {
    const { name } = req.params;

    const index = prices.food.findIndex(item => item.name === name);

    if (index !== -1) {
        prices.food.splice(index, 1);
        res.status(200).end();
    } 
    else {
        res.status(404).json({ message: 'Food Item Not Found' });
    }
});

app.get('/', (req, res) => {
    res.send('Hello There!!! This is the root GET method');
});

app.listen(port, () => {
    console.log('API Served At =>  http://157.230.236.144:3000');
});
